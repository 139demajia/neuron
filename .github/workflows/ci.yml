name: EMQX Neuron dev

on: 
  push:
  pull_request:
  release:
    types:
      - published

jobs:
  clang_format_check:
    runs-on: ubuntu-20.04

    steps:
      # checkout
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Run clang-format style check for C/C++ programs.
        uses: DoozyX/clang-format-lint-action@v0.12
        with:
          source: 'src plugins include tests'
          exclude: 'include/vector.h'
          clangFormatVersion: 10
          style: file

  cross-build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch:
          - [aarch64-linux-gnu, aarch64, gcc-aarch64-linux-gnu, g++-aarch64-linux-gnu, /opt/externs/libs, arm64]
          - [arm-linux-gnueabihf, armv4, gcc-arm-linux-gnueabihf, g++-arm-linux-gnueabihf, /opt/externs/libs, arm]
          - [x86_64-linux-gnu, x86_64, gcc, g++, /usr/local, amd64]

    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: install
        run: sudo apt-get install -y ${{ matrix.arch[2] }} ${{ matrix.arch[3] }} ninja-build pkg-config alien
      
      - name: install dep
        run: |
          ./install.sh -d ${{ matrix.arch[4] }} -c ${{ matrix.arch[0] }} -a ${{ matrix.arch[1] }}

      - name: compile
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/${{ matrix.arch[0] }}.cmake \
            -DCMAKE_BUILD_TYPE=Release -DDISABLE_UT=ON
          make -j4

      - name: Create package
        env:
          ARCH: ${{ matrix.arch[0] }}
        run: |
          ./package.sh -p ${ARCH} -n neuron-${GITHUB_REF##*/}-${{ steps.date.outputs.date }}_${ARCH%%-*}
          cd package
          python3 create_deb.py 2.${GITHUB_REF##*/} ${{ matrix.arch[5] }} ${{ steps.date.outputs.date }}
          sudo alien --scripts -k -r *.deb
          mv *.rpm neuron-2.${GITHUB_REF##*/}-${{ steps.date.outputs.date }}_${{ matrix.arch[5] }}.rpm
          mv *.rpm ../
          mv *.deb ../

      - uses: actions/upload-artifact@v3
        with:
          name: neuron-${{ matrix.arch[5] }}-${{ steps.date.outputs.date }}
          path: |
            *.tar.gz
            *.deb
            *.rpm

  ut:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: install dep
        run: |
          ./install.sh -d /usr/local -a x86_64 -c x86_64-linux-gnu

      - name: compile
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/x86_64-linux-gnu.cmake
          make -j4

      - name: unit test
        run: |
          cd build
          ctest --output-on-failure

  http_ft:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: install dep
        run: |
          ./install.sh -d /usr/local -a x86_64 -c x86_64-linux-gnu

      - name: compile
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/x86_64-linux-gnu.cmake
          make -j4

      - name: function test
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -r ft/requirements.txt
          python3 -m robot -P ft/ --variable neuron_api:http -d ft/http_reports ft

  mqtt_ft:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: install dep
        run: |
          ./install.sh -d /usr/local -a x86_64 -c x86_64-linux-gnu

      - name: compile
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/x86_64-linux-gnu.cmake
          make -j4

      - name: function test
        run: |
          sudo apt-get install -y mosquitto
          mosquitto -v &
          python3 -m pip install -U pip
          python3 -m pip install -r ft/requirements.txt
          python3 -m robot -P ft/ --variable neuron_api:mqtt -d ft/http_reports ft
  
  create_latest:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    needs: cross-build

    steps:
      - name: delete old daily-pre-release
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create daily-pre-release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: daily
          release_name: Daily Release
          draft: false
          prerelease: true
  
  release:
    runs-on: ubuntu-20.04
    if: github.event_name == 'release'
    needs: cross-build
    strategy:
      matrix:
        arch:
          - "arm-linux-gnueabihf"
          - "aarch64-linux-gnu"
          - "x86_64-linux-gnu"

    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ matrix.arch }}

      - id: package
        env:
          ARCH: ${{ matrix.arch }}
        run: echo "::set-output name=name::neuron-${GITHUB_REF##*/}-${ARCH%%-*}.tar.gz"

      - uses: actions/upload-release-asset@v1
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.package.outputs.name}}
          asset_name: ${{ steps.package.outputs.name}}
          asset_content_type: application/octet-stream
